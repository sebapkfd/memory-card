{"version":3,"sources":["components/Title.js","redux/gameSlice.js","components/cardList.js","components/Scoreboard.js","components/Card.js","components/Cardboard.js","components/Instructions.js","App.js","redux/store.js","index.js"],"names":["Title","className","href","target","rel","src","alt","initialState","score","bestScore","cards","name","selected","GameSlice","createSlice","reducers","clearGame","state","action","updateCards","payload","cardToUpdate","find","card","increaseScore","setBestScore","shuffleArray","i","length","j","Math","floor","random","actions","Scoreboard","dispatch","useDispatch","useSelector","game","onClick","Card","divStyle","color","backgroundColor","style","Cardboard","map","Instructions","useState","show","setShow","id","App","configureStore","reducer","gameReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.b87078f4.chunk.js","sourcesContent":["const Title = () => {\r\n    return (\r\n        <div className=\"title\">\r\n            <h1 className=\"title__text\">Memory Card Game</h1>\r\n            <a href=\"https://github.com/sebapkfd/memory-card\" target=\"_blank\" rel=\"noreferrer\">\r\n                <img src=\"https://img.icons8.com/fluent-systems-filled/24/ffffff/github.png\" alt=\"Github\"/>\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title;","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport cardList from \"../components/cardList\";\r\n\r\nexport const initialState = {\r\n    score: 0,\r\n    bestScore: 0,\r\n    cards: cardList\r\n}\r\n\r\nconst GameSlice = createSlice({\r\n    name: 'game',\r\n    initialState,\r\n    reducers: {\r\n        clearGame: (state, action) => {\r\n            state.score = 0\r\n            state.cards = initialState.cards\r\n        },\r\n        updateCards: (state, action) => {\r\n            const { name } = action.payload\r\n            let cardToUpdate = state.cards.find(card => card.name === name)\r\n            if (cardToUpdate) {\r\n                cardToUpdate.selected = !cardToUpdate.selected\r\n            }\r\n        },\r\n        increaseScore: (state, action) => {\r\n            state.score += 1\r\n        },\r\n        setBestScore: (state, action) => {\r\n            if(state.score >= state.bestScore) {\r\n                state.bestScore = state.score\r\n            }\r\n        },\r\n        shuffleArray: (state, action) => {\r\n            for (let i = state.cards.length - 1; i > 0; i--) {\r\n                const j = Math.floor(Math.random() * (i + 1));\r\n                [state.cards[i], state.cards[j]] = [state.cards[j], state.cards[i]];\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const { clearGame, updateCards, increaseScore, setBestScore, shuffleArray } = GameSlice.actions;\r\n\r\nexport default GameSlice.reducer;","const cardList = [\r\n    {name: 'Crimson', selected : false},\r\n    {name: 'Navy', selected : false},\r\n    {name: 'Green', selected : false},\r\n    {name: 'Gold', selected : false},\r\n    {name: 'Orange', selected : false},\r\n    {name: 'Purple', selected : false},\r\n    {name: 'Brown', selected : false},\r\n    {name: 'Pink', selected : false},\r\n    {name: 'Gray', selected : false},\r\n    {name: 'Olive', selected : false},\r\n    {name: 'Aqua', selected : false},\r\n    {name: 'Teal', selected : false},\r\n    {name: 'Maroon', selected : false},\r\n    {name: 'Orchid', selected : false},\r\n    {name: 'Lime', selected : false},\r\n]\r\n\r\nexport default cardList;","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { clearGame } from \"../redux/gameSlice\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Scoreboard = () => {\r\n    const dispatch = useDispatch();\r\n    const score = useSelector(state => state.game.score);\r\n    const bestScore = useSelector(state => state.game.bestScore);\r\n\r\n    return (score === 15) ? (\r\n        <div className='score-board'>\r\n            <h2>You have won!</h2>\r\n            <button onClick={() => dispatch(clearGame())}>Play Again</button>\r\n        </div>\r\n    ) : (\r\n        <div className=\"score-board\">\r\n            <h2 className=\"current-score\">Current Score: {score}</h2>\r\n            <h2 className=\"best-score\">Best Score: {bestScore}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scoreboard;","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { clearGame, increaseScore, setBestScore, shuffleArray, updateCards } from \"../redux/gameSlice\";\r\n\r\nconst Card = ({ card }) => {\r\n    const score = useSelector(state => state.game.score);\r\n    const dispatch = useDispatch();\r\n\r\n    const clickCard = () => {\r\n        if (score < 15) {\r\n            if (card.selected) {\r\n                dispatch(clearGame())\r\n            }\r\n            dispatch(updateCards({ name: card.name }));\r\n            dispatch(increaseScore());\r\n            dispatch(setBestScore());\r\n            dispatch(shuffleArray());\r\n        }\r\n    }\r\n\r\n    const divStyle = {\r\n        color: 'white',\r\n        backgroundColor:`${card.name}`\r\n    };\r\n\r\n    return (\r\n        <div className=\"card\" onClick={() => clickCard()} style={divStyle}>\r\n            <h3>{card.name}</h3>\r\n        </div>\r\n    )\r\n}\r\nexport default Card;","import React from \"react\";\r\nimport Card from './Card';\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Cardboard = () => {\r\n    const cards = useSelector(state => state.game.cards);\r\n\r\n    return (\r\n        <div className=\"card-board\">\r\n            {cards.map((card) => {\r\n                return <Card\r\n                    card={card}\r\n                    key={card.name}\r\n                />\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cardboard;","import { useState } from \"react\";\r\n\r\nconst Instructions = () => {\r\n    const [show, setShow] = useState(false);\r\n\r\n    return (show) ? (\r\n        <div id='instructions'>\r\n            <p>\r\n                This game consists in selecting all the items without repeating any of them.\r\n            </p>\r\n            <button onClick={() => setShow(false)}>Ok</button>\r\n        </div>\r\n    ) : (\r\n        <div id='show-instructions'>\r\n            <button onClick={() =>setShow(true)}>Instructions</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Instructions","import React from \"react\";\r\nimport Title from \"./components/Title\";\r\nimport ScoreBoard from \"./components/Scoreboard\";\r\nimport CardBoard from \"./components/Cardboard\";\r\nimport Instructions from \"./components/Instructions\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Title />\r\n            <Instructions />\r\n            <ScoreBoard />\r\n            <CardBoard/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport gameReducer from './gameSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        game: gameReducer\r\n    }\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}